
LEVEL: HARD

Input: heights = [2,1,5,6,2,3]
Output: 10
Input: heights = [2,4]
Output: 4

|*************************************************************************************|

SOLUTION -> Using momotonic stack 
T.C = O(N)
S.C =O(N) because we used stack

class Solution {
public:
   vector<int> nextele(vector<int>& arr)   // next smaller element 
   {
       int n=arr.size();
       vector<int> ans(n);
       stack<int> st;
       st.push(-1);

       for(int i=n-1;i>=0;i--)
       {
           int curr=arr[i];

           while(st.top()!=-1 && arr[st.top()]>=curr)
           {
               st.pop();
           }
           ans[i]=st.top();
           st.push(i);
       }
       return ans;
   }
    vector<int> prevele(vector<int>& arr)  // previous smaller element
   {
       int n=arr.size();
       vector<int> ans(n);
       stack<int> st;
       st.push(-1);

       for(int i=0;i<n;i++)
       {
           int curr=arr[i];

           while(st.top()!=-1 && arr[st.top()]>=curr)
           {
               st.pop();
           }
           ans[i]=st.top();
           st.push(i);
       }
       return ans;
   }


    int largestRectangleArea(vector<int>& heights) {
        
        int n=heights.size();

         vector<int> next(n);
         next=nextele(heights);

         vector<int> prev(n);
         prev=prevele(heights);
         int area=0;
        for(int i=0;i<n;i++)
        {
            int l=heights[i];
            if(next[i]==-1)
            next[i]=n;

            int b=next[i]-prev[i] -1;
            int newarea=l*b;
            area = max(area,newarea);
        }
        return area;
    }
};
