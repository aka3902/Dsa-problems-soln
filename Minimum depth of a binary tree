Input: root = [3,9,20,null,null,15,7]
Output: 2
Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5
 |********************************************************************************************************|
SOLUTION IN TIME COMPLEXITY OF O(N) AND SPACE COMPLEXITY OF O(1) EXCEPT RECURSION STACK
class Solution {
public:
    int minDepth(TreeNode* root) {
         if (root == nullptr) {
            return 0; // An empty tree has depth 0
        }

        int leftDepth = minDepth(root->left);
        int rightDepth = minDepth(root->right);

        // If either left or right subtree has depth 0, we take the non-zero depth.
        if (leftDepth == 0 || rightDepth == 0) {
            return max(leftDepth, rightDepth) + 1;
        } else {
            // If both left and right subtrees have depth greater than 0, we take the minimum depth.
            return min(leftDepth, rightDepth) + 1;
        }
        
    }
};
